name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - 'docs/**'
      - '*.md'
      - '.gitignore'

env:
  NODE_VERSION: '20'

jobs:
  # Job de testing y linting
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: npm run lint
      
    - name: 🧪 Run tests with coverage
      run: npm test -- --coverage
      env:
        NODE_ENV: test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: 📊 Upload coverage reports
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  # Job de build y verificación
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --only=production
      
    - name: 🏗️ Build verification
      run: |
        echo "🔍 Verificando estructura del proyecto..."
        ls -la
        echo "📁 Contenido de src/:"
        ls -la src/
        echo "✅ Build verification completed"

  # Job de deployment (solo en main)
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      
    - name: 🚀 Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        echo "🚀 Iniciando deployment a Render..."
        if [ -z "$RENDER_API_KEY" ]; then
          echo "⚠️  RENDER_API_KEY no configurado, saltando deployment"
          exit 0
        fi
        
        # Trigger deployment via Render API
        curl -X POST \
          "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          --data-raw '{}'
        
        echo "✅ Deployment triggered successfully"
    
    - name: 🎉 Deployment notification
      if: success()
      run: |
        echo "🎉 Deployment completado exitosamente!"
        echo "🔗 La aplicación debería estar disponible en breve"
        
    - name: 💬 Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment falló. Revisa los logs para más detalles."

  # Job de notificación de estado
  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Pipeline Status
      run: |
        echo "📊 Estado del Pipeline:"
        echo "  🧪 Tests: ${{ needs.test.result }}"
        echo "  🏗️  Build: ${{ needs.build.result }}"
        echo "  🚀 Deploy: ${{ needs.deploy.result }}"
        
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ Pipeline ejecutado correctamente"
        else
          echo "❌ Pipeline falló en alguna etapa"
          exit 1
        fi